package post_requests;

import base_urls.JsonPlaceHolderBaseUrl;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

public class Post02 extends JsonPlaceHolderBaseUrl {
    /*
    Given
      1) https://jsonplaceholder.typicode.com/todos
      2)  {
            "userId": 55,
            "title": "Tidy your room",
            "completed": false
         }
      3) Content type should be json
   When
       I send a POST Request to the Url

   Then
       Status code is 201
   And
       response body is like
                    {
                       "userId": 55,
                       "title": "Tidy your room",
                       "completed": false,
                       "id": 201
                     }

NOTE: for payload {"userId": 55, "title": "Tidy your room", "completed": false}
     */
    @Test
    public void post02(){

        // Set the url
        spec.pathParam("first","todos");

        // Set the expected data (payload => the data that you want to transfer to the server)
        //We can set the data using MAP => RECOMMENDED because we can make it more dynamic when it comes to assertions

        Map<String, Object> payload = new HashMap<>();
        payload.put("userId",55);
        payload.put("title","Tidy your room");
        payload.put("completed",false);

        System.out.println("payload = " + payload);

        // Send the request and get the response
        Response response = given(spec).when().body(payload).post("{first}"); //add this point, we need to do SERIALIZATION
        //contentType(ContentType.JSON) can be here or in JsonPlaceHolderBaseUrl. Ideally it should be in the baseUrl class
        //********FAMOUS INTERVIEW QUESTION******** ON API TESTING
        //Serialization: We need a serializer to convert a Java object to JSON => Converting Java Object to Json is called serialization
        //To do Serialization, add Jackson's dependency on pom.xml file
        response.prettyPrint();

        // Do Assertions
        //Use JsonPath to extract the data out of the response body for assertion
        JsonPath jsonPath = response.jsonPath();

        assertEquals(201, response.statusCode());
        assertEquals(payload.get("userId"), jsonPath.getInt("userId"));
        assertEquals(payload.get("title"), jsonPath.getString("title"));
        //assertEquals(false, jsonPath.getBoolean("completed")); //below line is recommended by IntelliJ
        assertFalse(jsonPath.getBoolean("completed"));

        //NOTE: We don't assert ids because in real life, the ids are generated by the system
        // and the id will be different everytime you send any API requests

    }

    @Test
    public void post02b(){

        // Set the url
        spec.pathParam("first","todos");

        // Set the expected data (payload => the data that you want to transfer to the server)
        //We can set the data using MAP => RECOMMENDED because we can make it more dynamic when it comes to assertions

        Map<String, Object> payload = new HashMap<>();
        payload.put("userId",55);
        payload.put("title","Tidy your room");
        payload.put("completed",false);

        System.out.println("payload = " + payload);

        // Send the request and get the response
        Response response = given(spec).when().body(payload).post("{first}"); //add this point, we need to do SERIALIZATION
        //contentType(ContentType.JSON) can be here or in JsonPlaceHolderBaseUrl. Ideally it should be in the baseUrl class
        //********FAMOUS INTERVIEW QUESTION******** ON API TESTING
        //Serialization: We need a serializer to convert a Java object to JSON => Converting Java Object to Json is called serialization
        //To do Serialization, add Jackson's dependency on pom.xml file
        response.prettyPrint();

        // Do Assertions
        //Use JsonPath to extract the data out of the response body for assertion
        // For assertions, both data types should be uniform (same). So we will change the response body to a Map and then use it for assertions.
        //Converting JSON to Java Object is called DE-SERIALIZATION

        Map<String, Object> actualData = response.as(HashMap.class); //DE-SERIALIZATION
        System.out.println("actualData = " + actualData);

        assertEquals(201, response.statusCode());
        assertEquals(payload.get("userId"), actualData.get("userId"));
        assertEquals(payload.get("title"), actualData.get("title"));
        //assertEquals(false, jsonPath.getBoolean("completed")); //below line is recommended by IntelliJ
        assertFalse((Boolean) actualData.get("completed"));

        //We didn't use nay hard code in this test method (This should be the target/aim)

        //NOTE: We don't assert ids because in real life, the ids are generated by the system
        // and the id will be different everytime you send any API requests

    }
}
